E 1.1:
    a) Prozess wartet, bis ein Kind-Prozess terminiert
    b) Pointer zu einem Integer, in dem die Statusinformation des Kind-Prozesses gespeicher werden soll
    c) waitpid(-1, &status, 0);
    d) Wenn der Status true (1) ist terminierte der Prozess normal
    e) Er steht in der Status-Variable drin

E 1.2:
    a) Nein
    b) Ja, einen -> den Kind-Prozess
    c) - Vordergrundprozess: Nein
       - Hintergrundprozess: Ja
    d) - Vordergrundprozess: Nein
       - Hintergrundprozess: Ja
       - Konsolenausgabe wird in File geschrieben (allerdings nur die vom Child-Prozess)

E 1.3:
    a) - execl: Stellt ein Array von Pointern zur Verfügung, welche die Argumente für den Prozess darstellen
       - execv: Stellt ein Array von Pointern zur Verfügung, welche die Argumente für den Prozess darstellen --> Unterschied zu execl???
       - execle: Akzeptiert eine Umgebung (in der variable envp), in welcher der prozess ausgeführt werden soll
       - execlp: Sucht auch im von $PATH spezifizierten pfad nach dem auszuführenden file (wenn es sich nicht um einen absoluten pfad handelt)
       - execvp: Sucht auch im von $PATH spezifizierten pfad nach dem auszuführenden file (wenn es sich nicht um einen absoluten pfad handelt)
    b) Die PID vom Aufrufer sowie alle offenen Verbindungen zu Dateien

E 1.4:
    a) Ok :)
    b) Wenn die auszuführende Datei nicht geladen werden kann, weil sie z.B. nicht gefunden werden konnte (Hier die Datei "/bin/date")
    c) Weil Child- und Parent-Prozess beide das Ende des Programms erreichen. Dies könnte behoben werden, indem der Parent-Code in einen else-Block verpackt wird.
    d) Nein
    e) Ja. Der Prozess mit der ID 1 (der Init-Prozess)
    f) Siehe Datei "002_1-4_demoexec.c"

E 1.5:
    Siehe Datei "002_1-5_demoexec.c"
