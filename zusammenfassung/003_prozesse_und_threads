Parallelverarbeitung
**************************************************************

Parallelität im Allgemeinen:
- Zwei oder mehr Dinge geschehen gleichzeitig
- Hardware-Parallelität:
    - Mehrere CPUs
    - Es kann aber auch immer gleichzeitig von der Harddisk gelesen werden, wenn die CPU rechnet
- Software-Parallelität:
    - Echt gleichzeitige Ausführung bei mehreren CPUs
    - Mehrere Prozesse teilen sich CPU, falls mehr Prozesse als CPUs:
        - Normalfall, schliesslich gilt meistens: Anzahl Prozesse > Anzahl Prozessoren
        - Einzelner Prozess denkt, er habe Ressourcen (Prozessor inkl. Register) alleine zur Verfügung
        - Quasiparallelität -> Prozessse wechseln sich regelmässig (schnell) ab, so dass man es kaum merkt -> behandeln wir jetzt
        - Threads / Fibres -> haben untereinander Prioritäten, wechseln sich ab, wenn andere warten müssen -> nächstes Semester
        - Welcher Prozess erhält wieviel Rechenzeit? -> Prozessorzuteilungsstrategien


Begriffe / Analogien:
- Programm: Kochrezept
- Prozess: Durchführen, Umsetzen des Kochrezepts (-> Kochen)
- Thread: Parallel ablaufende Aktivitäten innerhalb einer gemeinsamen Prozessumgebung (jeder Thread gehört zu einem Prozess, ein Prozess kann einen oder mehrere Threads haben)
- Nebenläufige Prozesse: Quasiparallele Ausführung auf einem Einprozessorsystem
- Task: Alternativer Begriff zu Prozes


Prozessmodell
**************************************************************
Grundprinzip:
- Wir befinden uns nun in der OS-Welt, nicht mehr in der Hardware-Welt
- Da Anzahl Prozesse > Anzahl Prozessoren, schaltet Betriebssystem automatisch zwischen diesen um (da dies sehr schnell geschieht, scheinen sie parallel zu laufen)
- Jeder Prozess hat virtuell den ganzen Rechner für sich alleine
- Was ist ein Prozess aus OS-Sicht?
    - Belegt einen Datenbereich (inkl. Stach und Heap)
    - Belegt einen Programmcodebereich
    - Belegt einen PCB:
        - Process Control Block
        - Dient der Prozessverwaltung durch OS
        - Enthält u.a. PID, aktuellen Prozesszustand, Prozesskontext (Registereinträge, Stack des Prozesses, ... -> so kann Prozess nach Unterbrechung wiederhergestellt werden)
        - Hat einen internen Program Counter (der beim Prozess-Switchen in den "echten" Program Counter kopiert wird)
- Prozesswechsel:
    1. Kontextsicherung aktueller Prozess
    2. Auswahl nächster Prozess
    3. Kontextwiederherstellung neuer Prozess
- Auch Betriebssystem braucht Prozess(e)


Ausführbares Programm (Datei):
- Enthält:
    - Programmcode (Logik)
    - Infos Speicherbelegung (z.B. für Konstanten)
    - Initialwerte (für Variablen / Konstanten)
- Ausführung:
    - Programm (inkl. Konstanten) laden (Programm in RAM laden, PCB erstellen, Reservation Speicherbereich für Stack, Initialwerte besetzen, ...)
    - Starten (Program Counter auf 1. Instruktion setzen)
    - Programmablauf (Konkurrierung mit anderen Prozessen, kann Systemdienste nutzen), mehrere Instanzen des Programms unterscheiden sich durch ihre PID
    - Bendigung (Durch Return oder schwerwiegenden Fehler) -> Return-Wert, Speicherfreigabe, PCB wird gelöscht


Prozesserzeugung und Terminierung:
- Gründe für Prozesstart:
    - Systemstart (Initialisierung)
    - Erzeugung durch laufenden Prozess
    - Durch Benutzer (bei Applikationsstart)
    - Auslösung eines Stapelauftrags (batch job)
- Vordergrundprozesse: Benutzer interagieren über Schnittstelle (UI)
- Hintergrundprozesse: Gehören keinem bestimmten Benutzer (z.B. Mail-Agent) -> Daemons
- 3 Arten der Prozesserzeugung:
    - Prozessverkettung (chaining): Prozess startet neuen Prozess, terminiert sich selbst (Prozess wird ersetzt)
    - Prozessvergabelung (forking): Prozess startet neuen Prozess (Kindprozess), läuft selbst weiter
    - Prozesserzeugung (creating): Prozess startet unabhängigen neuen Prozess, läuft selbst weiter
    - Unix kann nur fork und chain
- Prozesse vereinigen:
    - Join: Prozesse wieder zusammenführen (zwingend nach fork)
    - Wait: Auf anderen Prozess warten (z.B. auf einen mit create erstellten Prozess)
    - Join und Wait warten auf Exit (Prozess beenden) des betreffenden Prozesses
- Möglichkeiten zur Datenweitergabe nach Prozessbeendigung:
    - Datenvererbung (nur möglich, wenn Prozesse den gleichen Programmcode haben)
    - Weitergabe über Buffer
    - Initialparameter wird beim Erstellen an Prozess übergeben
    - Weitergabe über temporäre Datei
- Befehle unter Unix:
    - exec() für chaining (neuer Prozess ersetzt alten Prozess)
    - fork() für forking (Rückgabewert sagt, ob man Child (0), oder Parent (PID von Parent) ist) -> If-Else um zu entscheiden, ob Child oder Parent (Achtung, keine gemeinsamen Daten)
    - wait() um auf anderen Prozess zu warten (erhält Status (0 für okay, -1 für Fehler)) und Rückgabewert)
    - waitpid() um auf bestimmten anderen Prozess zu warten
    - exit() um Prozess zu beenden (optional: Rückgabewert mitgeben)
    - return(): Alternative zu exit(), allerdings ohne Aufräumarbeiten (tmp-Files löschen, offene Dateien schliessen, ...)
- Beispiel für fork:
    - Webserver, der auf Port 80 wartet
    - Port 80 soll während Anfrage-Verarbeitung aber nicht für neue Anfragen blockiert werden
    -> Lösung: Parent-Prozess, der auf neue Anfragen hört. Mittels fork() wird Child-Prozess pro Anfrage erstellt
- Zombieprozess:
    - Prozess, der keinen Code mehr ausführt, aber noch einen Eintrag in der Prozesstabelle belegt
    - 2 Fälle:
        - Wenn Parent-Prozess wait() aufruft, bevor Child-Prozess exit() aufgerufen hat -> Rückgabewert und Beendigunsstatus müssen noch für Parent bereitgehalten werden
        - Wenn Parent-Prozess Child-Prozess erstellt und sich dann beendet -> Child-Prozess wird zu Waise-Prozess, kann aber noch weiterlaufen (Init-Prozess (PID=1) wird zu Parent)
    - Parent-Prozess muss wait() aufrufen, wird dadurch aber blockiert, bis Child beendet wird
    - Lösung: Parent forkt Child1 -> Child1 forkt Child2 -> Child1 beendet sich selbst -> Child2 wird von Init-Prozess adoptiert (->selbständiger Prozess mittels fork() erstellt) 


Prozessorzuteilungsstrategien
**************************************************************

Quasiparallelität im Einprozessorsystem:
- Problem: Mehr Prozesse als Prosessoren -> mehrere Prozesse auf gleichem Prozessor
- Prozesse sind oft am Warten (I/O, Netzwerkschnittstellen, ...)
- Regeln:
    - OS muss Prozesse "schlafen legen" können
    - Keine busy waits! ("aktives" warten, d.h. selber nicht arbeiten können, aber andere blockieren)

Prozess- und Thread-Zustände:
- 4 Zustände:
    - Laufend (running): Maximal ein Prozess gleichzeitig (pro Prozessor natürlich)
    - Bereit (ready): Läuft im Moment nicht. Wartet darauf, vom OS ausgewählt zu werden
    - Wartend (waiting) / Blockiert (blocked): Kann im Moment nicht weiterarbeiten
    - Inaktiv (inactive): Prozess wurde noch nicht gestartet oder bereits wieder beendet
    -> Zu "Laufend" kommen Prozesse nur via "Bereit"
- Wahrscheinlich mehrere Zustände gleichzeitig "ready" -> Bereitliste
- Es kann auf verschiedene Ereignisse gewartet werden -> Verschiedene Wartelisten
- In welchem Zustand ein Prozess gerade ist, wird im PCB festgehalten


Zuteilungsstrategien:
- Wenn mehrere Prozesse gleichzeitig "ready" sind: Entscheid nötig, welcher dran kommt
- 2 Muster bei Prozessen:
    - CPU-lastig: Verbraucht viel Rechenzeit
    - I/O-lastig: Wartet hauptsächlich auf I/O (benutzt viel Peripherie)
- Optimalerweise wird also darauf geachtet, dass I/O-lastige Prozesse nicht (potentielle) Rechenzeit mit Warten verschwenden
- Nichtverdrängende Strategien: Ein neuer Prozess bekommt erst Rechenzeit, wenn der alte selbst aus dem Zustand "Laufend" heraustritt (warten, inaktiv, ...)
- Verdrängende Strategien: Ein aktiver Prozess wird gezielt ersetzt (auch wenn er selber noch fortfahren könnte) -> OS zwingt Prozess zu stoppen
- Strategien:
    - FIFO (wichtig):
        - First In First Out
        - Am längsten wartender Prozess wird als nächster ausgeführt
        - Nichtverdrängend
        - Minimaler Verwaltungsaufwand
        - Funktioniert nur, wenn Prozesse CPU auch tatsächlich wieder freigeben
    - SJF:
        - Shortest Job First
        - Prozess mit der kleinsten erwarteten Rechenzeit wird als nächster ausgeführt
        - Nichtverdrängend
        - Angaben über Rechenzeitbedarf müssen im Voraus zugänglich sein
    - SRT:
        - Shortest Remaining Time
        - Ähnlich wie SJF
        - Prozess mit dem kleinsten verbleibenden Rechenzeitbedarf wird als nächster ausgeführt
        - Verdrängend! Ansonsten gleiche Bedingungen wie SJF
    - RR (wichtig):
        - Round Robin
        - Alle 40 (Beispiel) Zeiteinheiten wird Prozess gewechselt, oder natütlich, wenn er eh fertig ist
        - Verdrängend
        - Spieltart: Anzahl der Zeiteinheiten variabel machen (abhängig von Prozess oder Last)
        -> FIFO mit Zeitumschaltung
    - ML (wichtig):
        - Multi-Level Priority
        - Den Prozessen werden Prioritäten zugeordnet
        - Prozess mit höchster Priorität wird als nächstes ausgewählt (haben 2 die gleiche Prioriät: FIFO)
        - Verdrängend (-> höchstpriorisierter Prozess besitzt stets CPU)
        - Nachteil: Monopolisierung von höherpriorisierten Prozessen -> Aushungern von niedrigpriorisierten Prozessen
        - Spielart: Kombination mit RR (gleich hoch priorisierte Prozesse wechseln sich ab)
    - MLF (wichtig):
        - Multi-Level Feedback
        - Ähnlich wie ML
        - Auswahl nächster Prozess: Zuerst nach Priorität, bei gleicher Priorität FIFO
        - Alle Prozesse beginnen hochpriorisiert
        - Nach bestimmter Laufzeit wreden Prozesse runterpriorisiert
        - Tiefer priorisierte Prozesse dürfen länger laufen (wenn sie dann drankommen)
        - Vorteil: Aushungern der tief priorisierten Prozesse wird verhindert
        - Vorteil: User-Feedback für I/O-lastige Prozesse bleibt schnell, denn sobald diese Prozesse "Wartend" werden, wird ihre Prio wieder zurückgesetzt
        -> so machen es moderne OS
